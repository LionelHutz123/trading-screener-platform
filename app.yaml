# Digital Ocean App Platform Configuration
# HutzTrades Secure Trading Platform with Enterprise Security

name: hutztrades-secure-api
region: sfo

services:
  # HutzTrades Secure API with Enhanced Security
  - name: hutztrades-secure-api
    source_dir: /
    github:
      repo: your-repo/trading-screener
      branch: main
    dockerfile_path: Dockerfile
    
    envs:
      # Security: All sensitive values are now environment secrets
      - key: ALPACA_API_KEY
        scope: RUN_AND_BUILD_TIME
        type: SECRET
      - key: ALPACA_SECRET_KEY
        scope: RUN_AND_BUILD_TIME
        type: SECRET
      - key: REDIS_PASSWORD
        scope: RUN_AND_BUILD_TIME
        type: SECRET
      
      # Application Configuration
      - key: ENV
        value: production
      - key: PORT
        value: "8080"
      - key: DATABASE_URL
        value: ${db.DATABASE_URL}
      - key: REDIS_URL
        value: ${redis.DATABASE_URL}
      
      # Streaming Configuration
      - key: ENABLE_STREAMING
        value: "true"
      - key: STREAMING_SYMBOLS
        value: "AAPL,MSFT,GOOGL,AMZN,TSLA,META,NVDA,SPY,QQQ"
      - key: STREAMING_TIMEFRAMES
        value: "1m,5m,15m,1h"
      
      # Security Configuration (Optional - for email alerts)
      - key: ALERT_EMAIL_USER
        scope: RUN_AND_BUILD_TIME
        type: SECRET
      - key: ALERT_EMAIL_PASSWORD
        scope: RUN_AND_BUILD_TIME
        type: SECRET
      - key: ALERT_RECIPIENTS
        value: "admin@hutztrades.com"
      - key: SECURITY_WEBHOOK_URL
        scope: RUN_AND_BUILD_TIME
        type: SECRET
        
    instance_count: 1
    instance_size_slug: professional-xs  # 1 vCPU, 1GB RAM
    
    http_port: 8080
    
    # Enhanced health check with security validation
    health_check:
      http_path: /health
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
      success_threshold: 1
    
    routes:
      - path: /api
      - path: /health
      - path: /docs
        preserve_path_prefix: true
      
  # Frontend Dashboard
  - name: frontend
    source_dir: /frontend
    build_command: npm run build
    output_dir: out
    
    envs:
      - key: NEXT_PUBLIC_API_URL
        value: ${trading-api.PUBLIC_URL}
        
    routes:
      - path: /

# Managed Database
databases:
  - name: db
    engine: PG
    version: "14"
    size: db-s-1vcpu-1gb  # 1 vCPU, 1GB RAM, 10GB storage
    
# Managed Redis
  - name: redis
    engine: REDIS
    version: "7"
    size: db-s-1vcpu-1gb

# Background Jobs for Backtesting
jobs:
  - name: backtest-job
    source_dir: /
    dockerfile_path: Dockerfile
    
    envs:
      - key: ALPACA_API_KEY
        scope: RUN_AND_BUILD_TIME
        type: SECRET
      - key: ALPACA_SECRET_KEY
        scope: RUN_AND_BUILD_TIME
        type: SECRET
      - key: DATABASE_URL
        value: ${db.DATABASE_URL}
      - key: REDIS_URL
        value: ${redis.DATABASE_URL}
        
    instance_count: 1
    instance_size_slug: professional-m  # 2 vCPU, 4GB RAM for backtesting
    
    run_command: python main.py --mode backtesting --symbols AAPL MSFT GOOGL NVDA META --timeframes 1h 4h 1d --start-date 2023-01-01 --end-date 2024-01-01

# Static assets and monitoring
static_sites:
  - name: docs
    source_dir: /docs
    build_command: echo "Static docs"
    output_dir: /
    routes:
      - path: /docs