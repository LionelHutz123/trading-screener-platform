version: '3.8'

services:
  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Main trading screener backend
  trading-screener:
    image: ${REGISTRY_URL}/trading-screener:latest
    container_name: trading-screener
    restart: unless-stopped
    environment:
      - ENV=production
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./backups:/app/backups
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Frontend (Next.js)
  frontend:
    image: ${REGISTRY_URL}/trading-frontend:latest
    container_name: trading-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      trading-screener:
        condition: service_healthy
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - trading-screener
      - frontend
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=10GB'
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: trading-monitoring
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Database backup service
  database-backup:
    image: alpine:latest
    container_name: trading-backup
    restart: unless-stopped
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    command: |
      sh -c '
      # Install crond
      apk add --no-cache dcron
      
      # Create backup script
      cat > /usr/local/bin/backup.sh << "EOF"
      #!/bin/sh
      DATE=$(date +%Y%m%d_%H%M%S)
      
      # Daily backup
      cp /data/trading_data.duckdb /backups/daily/backup_$DATE.duckdb
      
      # Weekly backup (Mondays)
      if [ $(date +%u) -eq 1 ]; then
        cp /data/trading_data.duckdb /backups/weekly/backup_$(date +%Y%m%d).duckdb
        find /backups/weekly -name "backup_*.duckdb" -mtime +28 -delete
      fi
      
      # Clean old daily backups (keep last 7 days)
      find /backups/daily -name "backup_*.duckdb" -mtime +7 -delete
      
      echo "Backup completed: $DATE"
      EOF
      
      chmod +x /usr/local/bin/backup.sh
      
      # Setup cron
      echo "$BACKUP_SCHEDULE /usr/local/bin/backup.sh" > /etc/crontabs/root
      
      # Run initial backup
      /usr/local/bin/backup.sh
      
      # Start cron daemon
      crond -f -l 2
      '
    networks:
      - trading-network

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: trading-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=true
    command: --interval 3600 --cleanup
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  grafana-storage:
    driver: local
  prometheus-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local